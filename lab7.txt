PROBLEMA 1
//algoritm ce calculeaza aria dreptunghiului si verifica daca diagonala este egala cu c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int Det_arie(int, int); // prototip de functie pentru a determina aria dreptunghiului
int Verif_diag(int, int, int); // prototip de functie pentru a verifica daca c este egala cu diagonala
int main()
{
        int a, b, c, aria_drept, verif;
        printf("Introduceti a: ");
        scanf("%i", &a);
        printf("Introdueti b: ");
        scanf("%i", &b);
        printf("Introduceti c:");
        scanf("%i", &c);
        aria_drept = Det_arie(a, b);
        printf("\nAria dreptunghiului este: %d", aria_drept);
        verif = Verif_diag(a, b, c);
        if (verif == 1) printf("\nDiagonala triunghiului este egala cu c");
        else printf("\nDiagonala triunghiului nu este egala cu c");
        return 0;
}
int Det_arie(int a, int b) //functie pentru a determina aria dreptunghiului
{
        int aria;
        aria = a * b;
        return aria;
}
int Verif_diag(int a, int b, int c) // functie pentru a verifica daca diagonala este egala cu c
{
        int rez;
        if (a * a + b * b == c * c) rez = 1;
        else rez = 0;
        return rez;
}













PROBLEMA 10
//algoritm ce calculeaza nr de cifre al unui numar

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

int cnt_cifre(int); //prototip de functie care calculeaza cate cifre are n


int main()
{
    int n, nrcif = 0;
    printf("\nIntroduceti numarul: ");
    scanf("%d", &n);
    nrcif = cnt_cifre(n);
    printf("\nNumarul de cifre a lui n este: %d", nrcif);
    return 0;

}

int cnt_cifre(int n) //functie care calculeaza cate cifre are n
{
    int contor=0;
    while (n > 0)
    {
        contor++;
        n = n / 10;
    }
    return contor;
}
















PROBLEMA 11
//algoritm ce afiseaza toate numerele impare din tablou

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void nrImp(int a[], int n); //prototip de functie care afiseaza numerele impare din tablou

int main()
{
        int a[101], n, i;
        printf("\nIntroduceti n: ");
        scanf("%d", &n);
        printf("\nIntroduceti elementele tabloului: ");
        for (i = 0; i < n; i++)
        {
                printf("\na[%d]= ", i);
                scanf("%d", &a[i]);
        }
        nrImp(a, n);
        return 0;
}

void nrImp(int a[], int n) //functie care afiseaza numerele impare din tablou
{
        int i;
        for (i = 0; i < n; i++)
                if (a[i] % 2 != 0) printf("\nNumerele impare sunt: %d", a[i]);

}



















PROBLEMA 12
/*algoritm care citeste un numar n de la tastatura apoi n numere pana cand
suma lor depaseste n. Acesta afiseaza suma numerelor cu o precizie de 2 zecimale, dar si contorul numerelor*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void suma(int); //prototip de functie care afiseaza suma numerelor si contorul

int main()
{
        int n,x;
        printf("\nIntroduceti numarul n: ");
        scanf("%d", &n);
        suma(n);

        return 0;
}

void suma(int n) //functie care afiseaza suma numerelor si contorul
{
        float x = 0,s=0;
        int cnt = 0;
        while (s < n)
        {
                printf("\nIntroduceti numarul: ");
                scanf("%f", &x);
                cnt++;
                s = s + x;
        }
        printf("\nSuma numerelor este: %.2f", s);
        printf("\nContorul numerelor este: %d", cnt);
}
























PROBLEMA 13
//algoritm ce calculeaza cmmmc a doua numere

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int cmmdc(int, int); //prototip de functie ce calculeaza cmmdc
int cmmmc(int, int, int); // prototip de functie ce calculeaza cmmmc

int main()
{
    int a, b, rez1,rez2;
    printf("Introduceti a: ");
    scanf("%d", &a);
    printf("Introdueti b: ");
    scanf("%d", &b);
    rez1 = cmmdc(a, b);
    rez2 = cmmmc(a, b, rez1);
    printf("\nCel mai mare divizor comun dintre a si b este: %d", rez2);

}

int cmmdc(int a, int b) //functie ce calculeaza cel mai mare divizor comun
{
   
    while (a != b)
    {
        if (a > b) a = a - b;
        else b = b - a;
    }
    return a;
}

int cmmmc(int a, int b, int rez1) //functie ce calculeaza cel mai mic multiplu comun
{
    int cel_mm_multiplu_c = 0;
    cel_mm_multiplu_c = (a * b) / rez1; //cel m mic multiplu comun depinde de cel mai mare divizor comun
    return cel_mm_multiplu_c;
}























PROBLEMA 14
//algoritm ce afiseaza numerele divizibile cu 3

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void nr_div3(int a[], int n); //prototip de functie care afiseaza numerele divizibile cu 3

int main()
{
        int i,n,a[101];
        printf("\nIntroduceti numarul n: ");
        scanf("%d", &n);
        printf("\nIntroduceti elementele tabloului: ");
        for (i = 0; i < n; i++)
        {
                printf("\na[%d] = ", i);
                scanf("%d", &a[i]);
        }
        nr_div3(a, n);
        return 0;
}

void nr_div3(int a[], int n)//functie care afiseaza numerele divizibile cu 3
{
        int i;
        for (i = 0; i < n; i++)
                if (a[i] % 3 == 0) printf("\nNumerele divizibile cu 3 sunt: %d", a[i]);
                
}


















PROBLEMA 15
//algoritm ce afiseaza caracterul s de n ori pe n randuri

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void afisare(char a[], int); //prototip de functie care afiseaza caracterul s de n ori pe n randuri

int main()
{
        int n;
        char a[10];
        printf("\nIntroduceti numarul n: ");
        scanf("%d", &n);
        printf("\nIntroduceti caracterul s: ");
        scanf("%s", &a);
        
        afisare(a, n);
        return 0;
}

void afisare(char a[], int n) // functie care afiseaza caracterul s de n ori pe n randuri
{
        int rand,i;
        rand = n;
        while (rand != 0)
        {
                for (i = 0; i < n; i++) printf(" %s", a);
                printf("\n");
                rand--;

        }
}


















PROBLEMA 2
// algoritm ce verifica daca un numar este patrat perfect

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <cmath>

int Verif(int n); // prototip de functie pentru a verifica daca nr este patrat perfect

int main()
{
        int n,rez;
        printf("Introduceti numarul=");
        scanf("%d", &n);
        rez = Verif(n);
        if (rez == 1) printf("\nNumarul este patrat perfect");
        else printf("\nNumarul nu este patrat perfect");

}

int Verif(int n)
{
        
        int rezultat;
        if ((int)(sqrt(n)) == (float)(sqrt(n)))
        
                rezultat = 1;
        
        else
         
                rezultat = 0;
        
        return rezultat;
}





















PROBLEMA 3
//algoritm ce calculeaza a^n prin inmultiri repetate
#define CRT_SECURE_NO_WARNINGS
#include<stdio.h>

#define a 10 // am definit constanta a
int Inmultire(int); // prototip de functie pentru a calcula a^n prin inmultiri repetate

int main()
{
        int n,n1;
        printf("Introduceti n: ");
        scanf("%i", &n);
        n1 = Inmultire(n);
        printf("Rezultatul(a^n) este: %i", n1);
        return 0;
}

int Inmultire( int n) // functie ce calculeaza a^n
{
        int rez=1;
        while (n > 0)
        {
                rez = rez * a;
                n--;
        }
        return rez;
}




















PROBLEMA 4
//algoritm ce calculeaza n!(n factorial)

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int factorial(int); // prototip de functie ce calculeaza n!

int main()
{
        int fact,n;
    printf("Introduceti n: ");
    scanf("%i", &n);
    fact = factorial(n);
    printf("Factorialul este egal cu: %i", fact);
    return 0;
}

int factorial(int n) // functie ce calculeaza factorialul
{
    int i,prod=1;
    for (i = 1; i <= n; i++)
        prod = prod * i;
    return prod;
}





















PROBLEMA 5
//algoritm ce calculeaza cel mai mare numar prim decat nr dat si afiseaza toate
//numerele prime mai mici decat n

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

int prim(int); //prototip de functie care returneaza daca un numar este prim sau nu
int maxim_prim(int); // prototip de functie care returneaza cel mai mare numar prim mai mic decat n
void toate_prime(int); //prototip de functie ce afiseaza toate numerele prime mai mici decat n

int main()
{
    int n, cel_mm_prim,nr_prime;
    printf("\nIntroduceti numarul: ");
    scanf("%d", &n);
    cel_mm_prim = maxim_prim(n);
    printf("\nCel mai mare numar prim este: %d", cel_mm_prim);
    toate_prime(n);


}



int prim(int n) //functie care returneaza daca un numar este prim sau nu
{
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;
    if (n % 2 == 0) return 0;
    for (int d = 3; d * d <= n; d = d + 2)
        if (n % d == 0) return 0;
    return 1;
}

int maxim_prim(int n) //functie care returneaza cel mai mare numar prim mai mic decat n
{
    int rez=0,i;
    for(i=n-1;i>1;i--)
        if (prim(i) == 1)
        {
            rez = i;
            break;
        }
    return rez;
}

void toate_prime(int n) //functie ce afiseaza toate numerele prime mai mici decat n
{
    int i;
    for (i = n - 1; i > 1; i--)
    {
        if (prim(i) == 1)
            printf("\nNr prime: %d", i);
    }
            
}



















PROBLEMA 6
//algoritm ce calculeaza cmmdc a doua numere

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int cmmdc(int, int); //prototip de functie ce calculeaza cmmdc

int main()
{
    int a, b,rez;
    printf("Introduceti a: ");
    scanf("%d", &a);
    printf("Introdueti b: ");
    scanf("%d", &b);
    rez = cmmdc(a, b);
    printf("\nCel mai mare divizor comun dintre a si b este: %d", rez);
    
}

int cmmdc(int a, int b) //functie ce calculeaza cel mai mare divizor comun
{
    while (a != b)
    {
        if (a > b) a = a - b;
        else b = b - a;
    }
    return a;
}

















PROBLEMA 7
//algoritm ce afiseaza toti divizorii numarului n

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

void divizor(int); //prototip de functie care afiseaza toti divizorii a lui n


int main()
{
    int n;
    printf("\nIntroduceti numarul: ");
    scanf("%d", &n);
    divizor(n);
    return 0;

}

void divizor(int n) // functie ce afiseaza toti divizorii a lui n
{
    int i;
    for (i = 1; i <= n; i++)
        if (n % i == 0) printf("\nDivizor a lui n: %d", i);
}