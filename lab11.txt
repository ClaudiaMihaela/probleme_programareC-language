PROBLEMA 1
﻿/*
Să se scrie un program care citeşte n numere reale, pe care le stochează într-un tablou 
alocat dinamic, afişează suma elementelor negative citite, iar la sfârşit eliberează zona 
de memorie alocată.
*/


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
int main(void) {
        int i, n;
        float *tab = NULL,s=0;
        printf("\nIntroduceti dimensiunea tablolului: ");
        scanf("%d", &n);
        if ((tab = (float*)malloc(n * sizeof(float)))) //am verificat daca alocarea dinamica a n date de tip int s-a realizat cu succes
        {
                printf("\nIntroduceti elementele tablolului: \n");
                for (i = 0; i < n; i++)
                {
                        printf("\t elementul %d: ", i);
                        scanf("%f", tab + i);
                }
                
        }
        else
                printf("\nAlocare nereusita !");
        for (i = 0; i < n; i++)
                if (*(tab + i) < 0) s = s + *(tab + i); // am adaugat la suma elementelor negative din tabloul unidimensional
        printf("\nSuma elementelor negative este: %.2f", s);
        if (tab)
                free(tab); //am eliberat spatiul de memorie
        return 0;
}











PROBLEMA 10
﻿/*
Să se scrie o aplicaţie C/C++, care alocă dinamic memorie pentru stocarea 
elementelor unei matrici de dimensiune nxn. Să se scrie o funcţie care calculează 
suma numerelor pozitive pare de sub diagonala principală şi o funcţie pentru afişarea 
matricei. Să se afişeze matricea şi suma cerută. Eliberaţi memoria alocată dinamic. 

*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
using namespace std;
void cit_mat(int*,  int); //prototip de functie pentru citirea elem. matricei
void afis_mat(int*, int); //prototip de functie pentru afisarea elem. matricei
int suma(int*, int);
int main(void) {
        int* tab, n,suma_nr;
        printf("\n Introduceti n, nr. linii si col.: ");
        
        scanf("%d", &n);
        
        if ( n <= 0) {
                printf("\nNumere invalide!\tMai incearcati!");
               
                return 1;
        }

        tab = (int*)malloc(n * n * sizeof(int));
        
        if (tab == 0) {
                
                printf("\n Eroare de alocare !");
                return 1;
        }
        printf("\nIntroduceti elementele matricei %d :", n);
        
        cit_mat(tab, n);
        
        printf("\nMatricea arata astfel:");
        
        afis_mat(tab, n);
        
        suma_nr = suma(tab, n); 
        printf("\nSuma este: %d", suma_nr); //am afisat suma elem. pare de sub diag.  principala

        if (tab) free(tab); //am eliberat spatiul de memorie
        return 0;
        
}
void cit_mat(int* tb, int n) { // am citit elementele matricei
        int i, j;
        for (i = 0; i < n; i++) {
                
                printf("\nLinia %d: ", i);
                for (j = 0; j < n; j++)
                        
                        scanf("%d", tb + i * n + j);
        }
}
void afis_mat(int* tb, int n) { // am afisat matricea
        int i, j;
        for (i = 0; i < n; i++) {
                
                printf("\n\t");
                for (j = 0; j < n; j++)
                        
                        printf("%d ", *(tb + i * n + j));
        }
        
        printf("\n");
}

int suma(int* tb, int n)
{
        int i, j,s=0;
        for (i = 0; i < n; i++) {

                for (j = 0; j < n; j++)
                        if (i > j && (*(tb + i * n + j) > 0) && (*(tb + i * n + j) % 2 == 0)) 
                                s = s + *(tb + i * n + j); // am adunat la suma elementele care au indeplinit conditia
                        
        }
        return s; // am returnat suma elementelor pozitive pare de sub diagonala principala

}
















PROBLEMA 12
/*Scrieți o aplicație C/C ++ care citește de la tastatură un tablou de până la 10 numere
întregi valori în intervalul 2, ..., 10. Dimensiunea reală este introdusă de la tastatură,
tabloul fiind alocat dinamic. Definiți două funcții care consideră tabloul ca parametru
și returnează valorile minime și maxime din tablou. Definiți o altă funcție care
returnează valoarea medie a elementelor introduse in tablou.
Definiți o altă funcție, olympic_filter(...), care care consideră tabloul inițial, returnând
adresa unui tablou alocat dinamic fără prima apariție a valorii minime și maxime
ordonate crescator.
În main( ) se afișează, de asemenea, tablou inițial, valoarea minimă și maximă, media
elementelor tabloului inițial, elementele tabloului nou obținute de funcția
olympic_filter(... ) si media obținută dupa aplicarea filtrului olimpic.
Validați introducerea datelor în conformitate cu cerințele problemei (dimensiunea
tabloului, elementele introduse cu reluare). Operațiile cu elementele tablourilor se vor
face folosind pointeri.

*/


#include <iostream>
#include <climits>
using namespace std;

int val_min(int*, int);
int val_max(int*, int);
float val_med(int*, int);
int  *olympic_filter(int*, int, int, int); //prototip de functie care returneaza adresa unui tablou alocat dinamic fără prima apariție a valorii minime și maxime ordonate crescator



int main()
{
	int i, n, *tab, minim, maxim;
	
	float media,media1,suma=0;
	cout << "\n Introduceti dimensiunea tabloului: ";
	cin >> n;
	if (n > 10)
	{
		cout << "Dimensiune prea mare!";
		return 1;
	}
	tab = new int[n];
	if (tab != 0) {
		cout << "\n Introduceti elementele tabloului : ";
		for (i = 0; i < n; i++) {
			cout << "\n\t Elementul " << i << " : ";

			cin >> *(tab + i);
		}
		cout << "\n\n Elementele tabloului sunt : ";
		for (i = 0; i < n; i++)

			cout << *(tab + i) << ' ';
	}
	else
		cout << "Alocare nereusita !";

	minim = val_min(tab, n);
	cout << "\nValoarea minima este: " << minim; //am afisat val. minima
	maxim = val_max(tab, n);
	cout << "\nValoarea maxima este: " << maxim; //am afisat val. maxima
	media = val_med(tab, n);
	cout << "\nValoarea medie este: " << media; //am afisat val. medie
	cout << "\nElementele din noul tablou fara prima aparitie a minimului si maximului sunt: " << " ";
	int* p = olympic_filter(tab, n, minim, maxim);
	for (i = 0; i < n-2; i++) cout << p[i]; //am afisat tabloul fara val. minima si cea maxima
	for (i = 0; i < n - 2; i++)
		suma = suma + *(tab + i);
	media1 = suma / (n - 2);
	cout << "\nValoarea medie a elementelor din noul tablou este: " << media1; //am afisat val. medie a elem. din noul tablou
	
	if (tab) delete[]tab;
}


int val_min(int* tb, int n)
{
	int i, minim = INT_MAX;
	for (i = 0; i < n; i++)
		if (*(tb + i) < minim) minim = *(tb + i); //am calculat val minima
	return minim;
}

int val_max(int* tb, int n)
{
	int i, maxim = INT_MIN;
	for (i = 0; i < n; i++)
		if (*(tb + i) > maxim) maxim = *(tb + i); //am calculat val maxima
	return maxim;
}

float val_med(int* tb, int n)
{
	int i;
	float s = 0, valoare_medie;
	for (i = 0; i < n; i++)
		s = s + *(tb+i);
	valoare_medie = s / n; // am aflat valoarea medie a elementelor din tabloul initial
	return valoare_medie;
}

int* olympic_filter(int*tb, int n, int minim, int maxim)
{
	int i,j,aux;
	for(i=0;i<n-1;i++)
		for(j=i+1;j<n;j++)
			if (*(tb+j) < *(tb + i))
			{
				aux = *(tb + i);
				*(tb + i) = *(tb + j); //am sortat crescator tabloul
				*(tb + j) = aux;

			}
	
	
	for (i = 0; i < n - 1; i++)
		if (*(tb + i) == minim)
		{
			for (j = i; j < n - 1; j++)
				*(tb + j) = *(tb + j + 1); //am eliminat prima aparitie a elementului minim
			
		}
		



	for (i = 0; i < n; i++)
		if (*(tb + i) == maxim)
		{
			for (j = i; j < n - 1; j++)
				*(tb + j) = *(tb + j + 1); //am eliminat prima aparitie a elementului maxim
			
		}
		
		
	return tb;
}













PROBLEMA 3
﻿/*
Să se scrie o aplicaţie C / C++, care alocă dinamic memorie pentru stocarea
elementelor a două matrici de "m" linii şi "n" coloane.Să se scrie o funcţie care
calculează suma celor două matrici şi o funcţie pentru afişarea unei matrici.Să se
afişeze matricile iniţiale şi matricea obţinută.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
void cit_mat1(int*, int, int);
void afis_mat1(int*, int, int);
void cit_mat2(int*, int, int);
void afis_mat2(int*, int, int);
int *suma_matrice(int*, int*, int*, int, int);
void afisare_matrice_suma(int*, int, int);

int main(void) {
        int* tab1, m, n, *tab2, *tab_suma;
        
        printf("\n Introduceti m si n, nr. linii si col.: ");
        scanf("%d%d", &m, &n);
        
        if ((m <= 0) || (n <= 0)) {
                printf("\nNumere invalide!\tMai incearcati!");
                
                return 1;
        }// end if
// alocare dinamica si test pointer
        tab_suma = (int*)malloc(m * n * sizeof(int)); //am alocat dinamic memorie pentru stocarea elementelor a  matricei suma de "m" linii şi "n" coloane

        tab1 = (int*)malloc(m * n * sizeof(int));  //am alocat dinamic memorie pentru stocarea elementelor a primei matrice de "m" linii şi "n" coloane

        
        if (tab1 == 0) {
                
                printf("\n Eroare de alocare !");
                return 1;
        }
        printf("\nIntroduceti elementele primei matrice %dx%d :", m, n);
        
        cit_mat1(tab1, m, n);
        
        printf("\n Prima matrice arata astfel:");
        
        afis_mat1(tab1, m, n);
        

        tab2 = (int*)malloc(m * n * sizeof(int));  //am alocat dinamic memorie pentru stocarea elementelor a celei de-a doua matrice de "m" linii şi "n" coloane

        if (tab2 == 0) {

                printf("\n Eroare de alocare !");
                return 1;
        }
        printf("\nIntroduceti elementele celei de-a doua matrice %dx%d :", m, n);

        cit_mat2(tab2, m, n);

        printf("\n A doua matrice arata astfel:");
        afis_mat2(tab2, m, n);
        
        tab_suma=suma_matrice(tab1, tab2,tab_suma, m, n);
        afisare_matrice_suma(tab_suma, m, n); //am afisat matricea suma
        if (tab1) free(tab1);
        if (tab2) free(tab2); //la final, am eliminat spatiul din matrici
        if (tab_suma) free(tab_suma);
        return 0;

}
void cit_mat1(int* tb, int l, int c) { //functie pentru citirea primei matrici
        int i, j;
        for (i = 0; i < l; i++) {
                
                printf("\nLinia %d: ", i);
                for (j = 0; j < c; j++)
                        
                        scanf("%d", tb + i * c + j);
        }
}
void afis_mat1(int* tb, int l, int c) { //functie de afisare a primei matrice
        int i, j;
        for (i = 0; i < l; i++) {
                
                printf("\n\t");
                for (j = 0; j < c; j++)
                        
                        printf("%d ", *(tb + i * c + j));
        }
        
        printf("\n");
}



void cit_mat2(int* tb, int l, int c) { //functie pentru citirea celei de-a doua matrici
        int i, j;
        for (i = 0; i < l; i++) {

                printf("\nLinia %d: ", i);
                for (j = 0; j < c; j++)

                        scanf("%d", tb + i * c + j);
        }
}
void afis_mat2(int* tb, int l, int c) { //functie de afisare a celei de-a doua matrice
        int i, j;
        for (i = 0; i < l; i++) {

                printf("\n\t");
                for (j = 0; j < c; j++)

                        printf("%d ", *(tb + i * c + j));
        }

        printf("\n");
}

int *suma_matrice(int* tb1, int* tb2, int* tab_suma, int l, int c) //functie care calculeaza suma matricelor
{
        int i, j;
        tab_suma = (int*)malloc(l * c * sizeof(int));
        for (i = 0; i < l; i++)
        {
                for (j = 0; j < c; j++)
                        *(tab_suma + i * c + j) = *(tb1 + i * c + j) + *(tb2 + i * c + j);

        }
        return tab_suma;

}

void afisare_matrice_suma(int *tab_suma, int l, int c) //functie care afiseaza matricea suma
{
        int i, j;
        printf("\nMatricea suma este: ");
        for (i = 0; i < l; i++) {

                printf("\n\t");
                for (j = 0; j < c; j++)

                        printf("%d ", *(tab_suma + i * c + j));
        }

        printf("\n");

}















﻿PROBLEMA 4
/* Să se scrie o aplicaţie C/C++ care alocă dinamic memorie pentru "n" şiruri de
caractere, care se vor citi de la tastatură.*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <malloc.h>
#include <string.h>
#define MAX 255

using namespace std;

int main(void)
{
        char *s;
        
        int n, i;
        cout << "\nIntroduceti numarul de siruri: ";
        cin >> n; //am citit nr de siruri
        
        
        while(n) 
        {
                s = new char[MAX]; //am alocat dinamic memorie pentru stocarea elementelor a unui sir de caractere 

                cin>>s;
                cout << "Sirul de caractere este: "<<s << endl; //am afisat sirul de caractere
                n--;

        }
       if(s) delete[]s;
        return 0;

}














PROBLEMA 7
﻿/*
Să se scrie o aplicaţie C/C++ care alocă dinamic memorie necesară pentru stocarea a 
10.000 de numere întregi. Programul iniţializează numerele cu valori aleatoare între 1 şi 100 (folosiţi funcţiile srand() şi/sau rand() în VC++).
Scrieţi o funcţie care afişează cele mai frecvente 10 numere şi numărul lor de apariţii în tabloul iniţial.
*/

using namespace std;
#include <climits>
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <malloc.h>
#include <math.h>

void nr_frecv(int*);

int main(void) {

    int lower = 1, upper = 100, count = 100000;

    //srand(time(0));
    int i;
    int * tab = NULL;
    tab = new int[10001];
    
    if (tab != 0)
    { 
        cout << "Alocare reusita";
    }
    else
        cout<<"\nAlocare nereusita !";
    time_t t1;
    srand((unsigned)time(&t1));
    int num = 0;
   
    for (i = 0; i < 10000; i++) {
        num = (rand() % (upper - lower + 1)) + lower; //am generat 10000 de valori aleatorii intre 1 si 100
        tab[i] = num;
        cout << tab[i] << " ";
    }//am creat tabloul cu aceste valori aleatorii
    nr_frecv(tab);
    if (tab)
        delete[]tab; //am eliberat memoria alocata
    return 0;
}

void nr_frecv(int* tb)
{
    int i,maxim=INT_MIN,*a,k=0,aux,cnt=0;
    a = new int[100];
    int fr[10000] = { 0 };
    for (i = 0; i <10000; i++)
        fr[*(tb+i)]++; // am pus intr-un vector "fr" frecventele numerelor generate aleatoriu

    for (i = 1; i <= 100; i++)
        if (fr[i] != 0)
        {
            a[k] = fr[i];
            k++; // am creat alt vector "a" cu frecventele numerelor pentru a le putea ordona descrescator
        }
    for(i=0;i<k-1;i++)
        for(int j=i+1;j<k;j++)
            if (a[j] > a[i])
            {
                aux = a[i]; // am ordonat descrescator valorile pentru a afla cele mai mari 10 frecvente
                a[i] = a[j];
                a[j] = aux;
            }
    
    cout << "Cele 10 numere numere cu cele mai mari frecvente sunt: " << endl;
   
        for (i = 1; i <= 100; i++)
    {
        bool ok = false;
        for (int j = 0; j < 9; j++) { //am mers cu 2 for-uri pentru a putea atat numerele cu cele mai mari frecvente, cat si frecventele lor


                if (a[j] == fr[i] && ok==false )
                {
                    ok = true; 
                    cout << "numarul " << i << " apare de " << a[j] << " ori" << endl;


                }

        }
    }
        
}













PROBLEMA 8
﻿/*
 Să se scrie o aplicaţie C/C++ în care se alocă dinamic memorie pentru n numere 
întregi, numere ce vor fi citite de la tastatură. Să se scrie funcţia care extrage radicalul 
din fiecare număr şi stochează valorile obţinute într-un alt tablou alocat dinamic. Să 
se afişeze numerele iniţiale şi valorile din tabloul format. Eliberaţi la sfârşit memoria 
alocată.
*/


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <math.h>

void radical(int*, int);

int main(void) {
        int i, n;
        int* tab = NULL;
        printf("\nIntroduceti dimensiunea tablolului: ");
        scanf("%d", &n);
        if ((tab = (int*)malloc(n * sizeof(int))))  //am verificat daca alocarea dinamica a n date de tip int s-a realizat cu succes
        {
                printf("\nIntroduceti elementele tablolului: \n");
                for (i = 0; i < n; i++)
                {
                        printf("\t elementul %d: ", i);
                        scanf("%d", tab + i);
                }
                for (i = 0; i < n; i++)
                        
                 printf("\n tab[%d] = %d", i, *(tab +i)); // am afisat tabloul initial
                printf("\n");
        }
        else
                printf("\nAlocare nereusita !");
        radical(tab, n);

        if (tab)
                free(tab); //am eliberat memoria alocata
        return 0;
}

void radical(int* tb, int n)
{
        int i;
        float* tab_nou;
        tab_nou = (float*)malloc(n * sizeof(float));

        for (i = 0; i < n; i++){
                
                *(tab_nou + i) = sqrt(*(tb + i)); //am extras radicalul din valorile primului tablou si le-am pus in altul
        }
        printf("\nNoul tablou este: ");
        for (i = 0; i < n; i++)
                printf("\n %f", *(tab_nou + i)); // am afisat noul tablou
        printf("\n");
                
        if (tab_nou) free(tab_nou); //am eliberat memoria alocata
}